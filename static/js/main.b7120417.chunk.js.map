{"version":3,"sources":["components/Navbar.jsx","components/ProductCard.jsx","components/ProductCardScrollContainer.jsx","components/BuyProductInterface.jsx","components/OnBuyPopup.jsx","components/Home.jsx","components/CategoryCard.jsx","components/Categories.jsx","components/CartItem.jsx","components/OnCheckoutPopup.jsx","components/EmptyState.jsx","components/ShoppingCart.jsx","components/ProductPage.jsx","components/RangeSlider.jsx","components/ProductCardGrid.jsx","components/ProductsOverview.jsx","components/Content.jsx","components/Footer.jsx","components/ScrollToTop.jsx","App.js","serviceWorker.js","index.js"],"names":["closeNavbar","checkbox","document","getElementById","checked","Navbar","props","className","id","type","htmlFor","src","alt","onClick","to","cartItemsCount","ProductCard","product","favorites","currency","onTogglePopup","onFavorite","name","price","sale","image","map","item","productID","includes","ProductCardScrollContainer","label","category","products","scrollPosition","onStoreScrollPosition","containerRef","useRef","useLayoutEffect","currentContainerRef","current","scrollLeft","filter","categories","length","toLowerCase","split","join","ref","index","key","BuyProductInterface","buyProductInterface","popupOnBuyProduct","onIncrementProduct","onInterfaceIncrementQuantity","onInterfaceDecrementQuantity","onInterfaceSelectChange","onInterfaceReset","sizes","quantity","selectedValue","useEffect","onChange","event","target","value","defaultValue","showPopup","OnBuyPopup","body","style","overflow","ReactDom","createPortal","stopPropagation","Home","containerScrollPosition","CategorieCard","link","Categories","productRandomInt","Math","floor","random","CategoryCard","randomInt","productCount","CartItem","onDecrementProduct","onRemoveProduct","OnCheckoutPopup","cart","onRemoveAllProducts","total","toFixed","replace","EmptyState","heading","description","buttonText","buttonLink","ShoppingCart","handleTogglePopup","setState","state","this","items","btnText","btnLink","cartID","p","Component","ProductPage","materials","cleaning","indexOf","SliderLabel","fontSize","lineHeight","margin","width","Track","backgroundColor","height","top","boxShadow","Rail","Handle","border","RangeSlider","values","onSliderChange","productsFilterSliderValues","max","step","onValueChange","onAfterChange","handleStyle","trackStyle","railStyle","ProductCardGrid","productsSortBy","onSort","ProductsOverview","displayedProducts","Content","exact","path","component","reduce","prev","next","render","routerProps","c","match","params","toString","Footer","href","rel","ScrollToTop","pathname","useLocation","window","scrollTo","App","handleIncrementProduct","cartItems","push","cartTotal","localStorage","setItem","JSON","stringify","handleDecrementProduct","splice","handleRemoveProduct","handleRemoveAllProducts","handleFavorite","handleSort","sortBy","sortValue","sort","handleSliderChange","sliderValues","handleInterfaceIncrementQuantity","handleInterfaceDecrementQuantity","handleInterfaceReset","handleInterfaceSelectChange","handleStoreScrollPosition","scrollContainerID","scrollPos","forEach","categoriesSorted","Set","concat","apply","getItem","parse","Boolean","location","hostname","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b7120417.chunk.js","sourcesContent":["// Navbar Component\n\nimport React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nconst closeNavbar = () => {\n    const checkbox = document.getElementById(\"hamburger\");\n    if (checkbox.checked) checkbox.checked = false;\n};\n\nfunction Navbar(props) {\n    return (\n        <nav className=\"nav\">\n            <div className=\"nav__links\">\n                <input\n                    className=\"nav__hamburger-checkbox\"\n                    id=\"hamburger\"\n                    type=\"checkbox\"\n                />\n                <label className=\"nav__hamburger-icon\" htmlFor=\"hamburger\">\n                    <img\n                        className=\"nav__hamburger-img\"\n                        src=\"/icons/left-alignment.svg\"\n                        alt=\"\"\n                    />\n                </label>\n\n                <NavLink\n                    onClick={closeNavbar}\n                    className=\"nav__logo-link\"\n                    to=\"/\"\n                >\n                    <span className=\"nav__logo\">\n                        sneakr<span>.</span>\n                    </span>\n                </NavLink>\n                <div className=\"nav__links nav__text-links\">\n                    <NavLink onClick={closeNavbar} to=\"/\">\n                        <span className=\"nav__link\">Home</span>\n                    </NavLink>\n                    <NavLink onClick={closeNavbar} to=\"/categories\">\n                        <span className=\"nav__link\">Categories</span>\n                    </NavLink>\n                    <NavLink onClick={closeNavbar} to=\"/products\">\n                        <span className=\"nav__link\">Products</span>\n                    </NavLink>\n                    <NavLink onClick={closeNavbar} to=\"/categories/sale\">\n                        <span className=\"nav__link\">Sale</span>\n                    </NavLink>\n                </div>\n            </div>\n            <div className=\"nav__links\">\n                <NavLink onClick={closeNavbar} to=\"/favorites\">\n                    <img\n                        className=\"nav__icon\"\n                        src=\"/icons/heart.svg\"\n                        alt=\"Favorites\"\n                    />\n                </NavLink>\n\n                <NavLink onClick={closeNavbar} to=\"/cart\">\n                    <div className=\"nav__cart\">\n                        <img\n                            className=\"nav__icon\"\n                            src=\"/icons/cart.svg\"\n                            alt=\"Cart\"\n                        />\n                        <div className=\"nav__item-indicator\">\n                            <p>\n                                {props.cartItemsCount < 100\n                                    ? props.cartItemsCount\n                                    : 99}\n                            </p>\n                        </div>\n                    </div>\n                </NavLink>\n            </div>\n        </nav>\n    );\n}\n\nexport default Navbar;\n","// ProductCard Component\n// Returns a single product card\n\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction ProductCard(props) {\n    const { product, favorites, currency, onTogglePopup, onFavorite } = props;\n    const { id, name, price, sale } = product;\n    const image = product[\"image-small\"];\n\n    return (\n        <>\n            <div className=\"product-card\">\n                <Link to={`/products/id=${id}`}>\n                    <img\n                        className=\"product-card__image\"\n                        src={\"/img/\" + image + \".jpg\"}\n                        alt=\"Product\"\n                    />\n                    <p className=\"product-card__name\">{name}</p>\n                    <div className=\"product-card__price-sale-container\">\n                        {sale ? (\n                            <p className=\"product-card__price--sale\">\n                                {sale + currency}\n                            </p>\n                        ) : null}\n                        {sale ? (\n                            <p className=\"product-card__price--strike-through\">\n                                {price + currency}\n                            </p>\n                        ) : (\n                            <p className=\"product-card__price\">\n                                {price + currency}\n                            </p>\n                        )}\n                    </div>\n                </Link>\n                <button\n                    className=\"btn btn--circular product-card__btn product-card__btn--buy\"\n                    onClick={() => onTogglePopup(product)}\n                >\n                    <img alt=\"Buy\" src=\"/icons/cart.svg\" />\n                </button>\n                <button\n                    className=\"btn btn--circular product-card__btn product-card__btn--favorite\"\n                    onClick={() => onFavorite(product)}\n                >\n                    {favorites\n                        .map((item) => item.productID)\n                        .includes(product.id) ? (\n                        <img\n                            alt=\"Remove Favorite\"\n                            src=\"/icons/heart-full.svg\"\n                        />\n                    ) : (\n                        <img alt=\"Add Favorite\" src=\"/icons/heart.svg\" />\n                    )}\n                </button>\n            </div>\n        </>\n    );\n}\n\nexport default ProductCard;\n","// ProductCardScrollContainer Component\n// Scroll container of products\n\nimport React, { useLayoutEffect, useRef } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport ProductCard from \"./ProductCard\";\n\nfunction ProductCardScrollContainer(props) {\n    const {\n        id,\n        label,\n        category,\n        products,\n        favorites,\n        currency,\n        scrollPosition,\n        onTogglePopup,\n        onFavorite,\n        onStoreScrollPosition,\n    } = props;\n\n    // Handles remembering previous scroll position\n    const containerRef = useRef(null);\n\n    useLayoutEffect(() => {\n        const currentContainerRef = containerRef.current;\n        if (currentContainerRef !== null)\n            currentContainerRef.scrollLeft = scrollPosition;\n\n        return () => {\n            if (\n                currentContainerRef !== null &&\n                currentContainerRef.scrollLeft !== scrollPosition\n            ) {\n                onStoreScrollPosition(id, currentContainerRef.scrollLeft);\n            }\n        };\n    });\n\n    return products.filter((product) => product.categories.includes(category))\n        .length === 0 ? null : (\n        <div className=\"product-card-scroll-container\">\n            <div className=\"product-card-scroll-container__label-link-container\">\n                <h2 className=\"text-styles text-styles--h2\">{label}</h2>\n                <Link\n                    to={`/categories/${category\n                        .toLowerCase()\n                        .split(/[_\\s]/)\n                        .join(\"-\")}`}\n                >\n                    <button className=\"btn btn--container product-card-scroll-container product-card-scroll-container__see-all-btn\">\n                        <span>See all in {category}</span>\n                    </button>\n                </Link>\n            </div>\n\n            <div\n                ref={containerRef}\n                className=\"product-card-scroll-container__scroll-grid\"\n            >\n                {products\n                    .filter((product) => product.categories.includes(category))\n                    .map((product, index) => {\n                        if (index < 10) {\n                            return (\n                                <div\n                                    className=\"product-card-scroll-container__scroll-grid-element\"\n                                    key={product.id}\n                                >\n                                    <ProductCard\n                                        product={product}\n                                        favorites={favorites}\n                                        currency={currency}\n                                        onTogglePopup={onTogglePopup}\n                                        onFavorite={onFavorite}\n                                    />\n                                </div>\n                            );\n                        }\n                        return null;\n                    })}\n            </div>\n        </div>\n    );\n}\n\nexport default ProductCardScrollContainer;\n","// BuyProductInterface Component\n// Returns the interface for buying a product\n\nimport React from \"react\";\nimport { useEffect } from \"react\";\n\nfunction BuyProductInterface(props) {\n    const {\n        product,\n        favorites,\n        image,\n        currency,\n        buyProductInterface,\n        popupOnBuyProduct,\n        onFavorite,\n        onIncrementProduct,\n        onInterfaceIncrementQuantity,\n        onInterfaceDecrementQuantity,\n        onInterfaceSelectChange,\n        onInterfaceReset,\n        onTogglePopup,\n    } = props;\n    const { price, sale, sizes } = product;\n    const { quantity, selectedValue } = buyProductInterface;\n\n    useEffect(() => {\n        if (selectedValue === null) onInterfaceSelectChange(sizes[0]);\n    });\n\n    return (\n        <div className=\"buy-interface\">\n            <div className=\"buy-interface__image\">\n                <div>\n                    <img src={\"/img/\" + image + \".jpg\"} alt=\"Product\" />\n                </div>\n            </div>\n            <div className=\"buy-interface__main-container\">\n                <div className=\"buy-interface__label-btn-container\">\n                    <p className=\"buy-interface__label text-styles text-styles--label\">\n                        Price:\n                    </p>\n                    <div className=\"btn btn--container\">\n                        {sale ? (\n                            <p className=\"buy-interface__price--sale\">\n                                {sale + currency}\n                            </p>\n                        ) : null}\n                        {sale ? (\n                            <p className=\"buy-interface__price--strike-through\">\n                                {price + currency}\n                            </p>\n                        ) : (\n                            <p className=\"buy-interface__price\">\n                                {price + currency}\n                            </p>\n                        )}\n                    </div>\n                </div>\n                <div className=\"buy-interface__container buy-interface__label-btn-container\">\n                    <div className=\"buy-interface__form-btn\">\n                        <p className=\"buy-interface__label text-styles text-styles--label\">\n                            Size:\n                        </p>\n                        <div className=\"btn btn--select\">\n                            <select\n                                onChange={(event) =>\n                                    onInterfaceSelectChange(event.target.value)\n                                }\n                                defaultValue={selectedValue}\n                            >\n                                {sizes.map((item) => (\n                                    <option key={item} value={item}>\n                                        {item}\n                                    </option>\n                                ))}\n                            </select>\n                            <img src=\"/icons/down-arrow.svg\" alt=\"\" />\n                        </div>\n                    </div>\n                    <div className=\"buy-interface__form-btn\">\n                        <p className=\"buy-interface__label text-styles text-styles--label\">\n                            Quantity:\n                        </p>\n                        <div className=\"btn btn--plus-minus\">\n                            <div>\n                                <button onClick={onInterfaceDecrementQuantity}>\n                                    <img\n                                        alt=\"Decrement Quantity\"\n                                        src=\"/icons/remove.svg\"\n                                    />\n                                </button>\n                                <p>{quantity}</p>\n                                <button onClick={onInterfaceIncrementQuantity}>\n                                    <img\n                                        alt=\"Increment Quantity\"\n                                        src=\"/icons/plus.svg\"\n                                    />\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                    <button\n                        className=\"btn btn--circular\"\n                        onClick={() => onFavorite(product)}\n                    >\n                        {favorites\n                            .map((item) => item.productID)\n                            .includes(product.id) ? (\n                            <img\n                                alt=\"Remove Favorite\"\n                                src=\"/icons/heart-full.svg\"\n                            />\n                        ) : (\n                            <img alt=\"Add Favorite\" src=\"/icons/heart.svg\" />\n                        )}\n                    </button>\n                </div>\n\n                <button\n                    className=\"btn btn--primary buy-interface__label-btn-container buy-interface__buy-btn\"\n                    onClick={() => {\n                        onIncrementProduct(product, selectedValue, quantity);\n                        onInterfaceReset();\n                        if (popupOnBuyProduct.showPopup) {\n                            onTogglePopup();\n                        }\n                    }}\n                >\n                    Add {quantity} {quantity > 1 ? \"items\" : \"item\"} to cart\n                </button>\n            </div>\n        </div>\n    );\n}\n\nexport default BuyProductInterface;\n","// OnBuyPopup Component\n// Returns a popup when buy button is clicked\n\nimport React, { useEffect } from \"react\";\nimport ReactDom from \"react-dom\";\n\nimport BuyProductInterface from \"./BuyProductInterface\";\n\nfunction OnBuyPopup(props) {\n    const {\n        product,\n        favorites,\n        currency,\n        buyProductInterface,\n        popupOnBuyProduct,\n        onFavorite,\n        onIncrementProduct,\n        onTogglePopup,\n        onInterfaceIncrementQuantity,\n        onInterfaceDecrementQuantity,\n        onInterfaceReset,\n        onInterfaceSelectChange,\n    } = props;\n\n    // Prevent scrolling of app if popup is open\n    useEffect(() => {\n        document.body.style.overflow = \"hidden\";\n\n        return () => (document.body.style.overflow = \"unset\");\n    });\n\n    return ReactDom.createPortal(\n        <div className=\"popup__bg\" onClick={onTogglePopup}>\n            <div className=\"popup\" onClick={(event) => event.stopPropagation()}>\n                <h1 className=\"text-styles text-styles--h1\">{product.name}</h1>\n                <div>\n                    <BuyProductInterface\n                        product={product}\n                        favorites={favorites}\n                        image={product[\"image-large\"]}\n                        currency={currency}\n                        buyProductInterface={buyProductInterface}\n                        popupOnBuyProduct={popupOnBuyProduct}\n                        onFavorite={onFavorite}\n                        onIncrementProduct={onIncrementProduct}\n                        onInterfaceIncrementQuantity={\n                            onInterfaceIncrementQuantity\n                        }\n                        onInterfaceDecrementQuantity={\n                            onInterfaceDecrementQuantity\n                        }\n                        onInterfaceReset={onInterfaceReset}\n                        onInterfaceSelectChange={onInterfaceSelectChange}\n                        onTogglePopup={onTogglePopup}\n                    />\n                </div>\n                <button\n                    className=\"btn btn--circular popup__close-btn\"\n                    onClick={onTogglePopup}\n                >\n                    <img src=\"/icons/cancel.svg\" alt=\"Cancel\" />\n                </button>\n            </div>\n        </div>,\n        document.getElementById(\"portal\")\n    );\n}\n\nexport default OnBuyPopup;\n","// Home Component\n// Home page of the app\n\nimport React from \"react\";\n\nimport ProductCardScrollContainer from \"./ProductCardScrollContainer\";\nimport OnBuyPopup from \"./OnBuyPopup\";\n\nfunction Home(props) {\n    const {\n        categories,\n        products,\n        favorites,\n        currency,\n        popupOnBuyProduct,\n        buyProductInterface,\n        containerScrollPosition,\n        onTogglePopup,\n        onFavorite,\n        onIncrementProduct,\n        onInterfaceIncrementQuantity,\n        onInterfaceDecrementQuantity,\n        onInterfaceReset,\n        onInterfaceSelectChange,\n        onStoreScrollPosition,\n    } = props;\n\n    return (\n        <div>\n            <h1 className=\"text-styles text-styles--h1\">\n                Browse in Categories\n            </h1>\n\n            {categories.map((category, index) => {\n                if (category.name !== null && index < 5) {\n                    return (\n                        <div key={index} className=\"home__scroll-container\">\n                            <ProductCardScrollContainer\n                                id={index + 1}\n                                category={category.name}\n                                label={category.name}\n                                products={products}\n                                favorites={favorites}\n                                currency={currency}\n                                scrollPosition={\n                                    containerScrollPosition[index + 1]\n                                }\n                                onTogglePopup={onTogglePopup}\n                                onFavorite={onFavorite}\n                                onStoreScrollPosition={onStoreScrollPosition}\n                            />\n                        </div>\n                    );\n                }\n                return null;\n            })}\n\n            {popupOnBuyProduct.showPopup ? (\n                <OnBuyPopup\n                    product={popupOnBuyProduct.product}\n                    favorites={favorites}\n                    currency={currency}\n                    buyProductInterface={buyProductInterface}\n                    popupOnBuyProduct={popupOnBuyProduct}\n                    onFavorite={onFavorite}\n                    onIncrementProduct={onIncrementProduct}\n                    onTogglePopup={onTogglePopup}\n                    onInterfaceIncrementQuantity={onInterfaceIncrementQuantity}\n                    onInterfaceDecrementQuantity={onInterfaceDecrementQuantity}\n                    onInterfaceReset={onInterfaceReset}\n                    onInterfaceSelectChange={onInterfaceSelectChange}\n                />\n            ) : null}\n        </div>\n    );\n}\n\nexport default Home;\n","// CategoryCard Component\n// Returns a single category card\n\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction CategorieCard(props) {\n    const { category, image, link } = props;\n\n    return (\n        <div className=\"category-card\">\n            <Link to={`${link.toLowerCase().split(/[_\\s]/).join(\"-\")}`}>\n                <img\n                    className=\"category-card__image\"\n                    src={\"/img/\" + image + \".jpg\"}\n                    alt={category + \" image\"}\n                />\n                <div className=\"category-card__name-bg\" />\n                <p className=\"category-card__name\">{category}</p>\n            </Link>\n        </div>\n    );\n}\n\nexport default CategorieCard;\n","// Categories Component\n// Categories page of the app\n\nimport React from \"react\";\n\nimport CategoryCard from \"./CategoryCard\";\n\nfunction Categories(props) {\n    const { categories, products } = props;\n\n    const productRandomInt = Math.floor(\n        Math.random() * Math.floor(products.length)\n    );\n\n    return (\n        <div className=\"categories\">\n            <h1 className=\"text-styles text-styles--h1\">Categories</h1>\n            <div className=\"categories__grid\">\n                <CategoryCard\n                    key={\"products\"}\n                    category={\"All Products\"}\n                    image={products[productRandomInt][\"image-small\"]}\n                    link={\"/products\"}\n                />\n                {categories.map((category) => {\n                    if (category.name !== null) {\n                        const randomInt = Math.floor(\n                            Math.random() * Math.floor(category.productCount)\n                        );\n\n                        return (\n                            <CategoryCard\n                                key={category.name}\n                                category={category.name}\n                                image={\n                                    products\n                                        .filter((product) =>\n                                            product.categories.includes(\n                                                category.name\n                                            )\n                                        )\n                                        .map(\n                                            (product) => product[\"image-small\"]\n                                        )[randomInt]\n                                }\n                                link={\"/categories/\" + category.name}\n                            />\n                        );\n                    }\n                    return null;\n                })}\n            </div>\n        </div>\n    );\n}\n\nexport default Categories;\n","// CartItem Component\n// Returns a single cart item card\n\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction CartItem(props) {\n    const {\n        item,\n        product,\n        image,\n        currency,\n        onIncrementProduct,\n        onDecrementProduct,\n        onRemoveProduct,\n    } = props;\n    const { quantity, selectedValue } = item;\n    const { id, name, price, sale } = product;\n\n    return (\n        <div className=\"cart-item-card\">\n            <Link to={`/products/id=${id}`}>\n                <div className=\"cart-item-card__image\">\n                    <div>\n                        <img src={\"/img/\" + image + \".jpg\"} alt=\"Product\" />\n                    </div>\n                </div>\n            </Link>\n\n            <div className=\"cart-item-card__body\">\n                <Link to={`/products/id=${id}`}>\n                    <p className=\"cart-item-card__name\">{name}</p>\n                </Link>\n                <div className=\"cart-item-card__price-size-container\">\n                    <div className=\"cart-item-card__price\">\n                        {sale ? (\n                            <p className=\"cart-item-card__price--sale\">\n                                {sale + currency}\n                            </p>\n                        ) : null}\n                        {sale ? (\n                            <p className=\"cart-item-card__price--strike-through\">\n                                {price + currency}\n                            </p>\n                        ) : (\n                            <p className=\"cart-item-card__price\">\n                                {price + currency}\n                            </p>\n                        )}\n                    </div>\n                    <p className=\"cart-item-card__size\">\n                        Size: {selectedValue}\n                    </p>\n                </div>\n            </div>\n            <button\n                className=\"btn btn--circular cart-item-card__remove-btn\"\n                onClick={() => onRemoveProduct(product, selectedValue)}\n            >\n                <img alt=\"Remove item\" src=\"/icons/trash.svg\" />\n            </button>\n            <div className=\"btn btn--plus-minus cart-item-card__plus-minus-btn\">\n                <div>\n                    <button\n                        onClick={() =>\n                            onDecrementProduct(product, selectedValue)\n                        }\n                    >\n                        <img alt=\"Decrement Quantity\" src=\"/icons/remove.svg\" />\n                    </button>\n                    <p>{quantity}</p>\n                    <button\n                        onClick={() =>\n                            onIncrementProduct(product, selectedValue)\n                        }\n                    >\n                        <img alt=\"Increment Quantity\" src=\"/icons/plus.svg\" />\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default CartItem;\n","// OnCheckoutPopup Component\n// Returns a popup, handling the checkout process when checkout button is clicked\n\nimport React, { useEffect } from \"react\";\nimport ReactDom from \"react-dom\";\n\nfunction OnCheckoutPopup(props) {\n    const {\n        cart,\n        cartItemsCount,\n        currency,\n        onTogglePopup,\n        onRemoveAllProducts,\n    } = props;\n\n    // Prevent scrolling of app if popup is open\n    useEffect(() => {\n        document.body.style.overflow = \"hidden\";\n\n        return () => (document.body.style.overflow = \"unset\");\n    });\n\n    return ReactDom.createPortal(\n        <div\n            className=\"popup__bg\"\n            onClick={() => {\n                onRemoveAllProducts();\n                onTogglePopup();\n            }}\n        >\n            <div className=\"popup\" onClick={(event) => event.stopPropagation()}>\n                <h1 className=\"text-styles text-styles--h1\">\n                    Checkout successful!\n                </h1>\n                <div className=\"checkout-popup\">\n                    <p className=\"checkout-popup__heading text-styles text-styles-p\">\n                        {\"You have bought \" +\n                            cartItemsCount +\n                            \" \" +\n                            (cartItemsCount > 1 ? \"items\" : \"item\") +\n                            \" for a total of \" +\n                            cart.total.toFixed(2).replace(\"-0\", \"0\") +\n                            currency +\n                            \".\"}\n                    </p>\n                    <button\n                        className=\"btn btn--primary\"\n                        onClick={() => {\n                            onRemoveAllProducts();\n                            onTogglePopup();\n                        }}\n                    >\n                        Dismiss\n                    </button>\n                </div>\n                <button\n                    className=\"btn btn--circular popup__close-btn\"\n                    onClick={() => {\n                        onRemoveAllProducts();\n                        onTogglePopup();\n                    }}\n                >\n                    <img src=\"/icons/cancel.svg\" alt=\"Cancel\" />\n                </button>\n            </div>\n        </div>,\n        document.getElementById(\"portal\")\n    );\n}\n\nexport default OnCheckoutPopup;\n","// EmptyState Component\n// Handles displaying of an empty state message\n\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction EmptyState(props) {\n    const { heading, description, buttonText, buttonLink } = props;\n\n    return (\n        <div className=\"empty-state\">\n            <div className=\"empty-state__inner-container\">\n                <h1 className=\"empty-state__heading text-styles text-styles--h1\">\n                    {heading}\n                </h1>\n                <p className=\"empty-state__description\">{description}</p>\n                {(buttonLink || buttonText) === null ? null : (\n                    <Link to={buttonLink}>\n                        <button className=\"btn btn--primary empty-state__btn\">\n                            {buttonText}\n                        </button>\n                    </Link>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default EmptyState;\n","// ShoppingCart Component\n// Shopping cart page of the app\n\nimport React, { Component } from \"react\";\n\nimport CartItem from \"./CartItem\";\nimport OnCheckoutPopup from \"./OnCheckoutPopup\";\nimport EmptyState from \"./EmptyState\";\n\nclass ShoppingCart extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            showPopup: false,\n        };\n    }\n\n    handleTogglePopup = () => {\n        this.setState({\n            showPopup: !this.state.showPopup,\n        });\n    };\n\n    render() {\n        const {\n            products,\n            cart,\n            cartItemsCount,\n            favorites,\n            currency,\n            onIncrementProduct,\n            onDecrementProduct,\n            onRemoveProduct,\n            onRemoveAllProducts,\n        } = this.props;\n        const { showPopup } = this.state;\n        const { items, total } = cart;\n\n        const btnText =\n            favorites.length > 0\n                ? \"See your favorites\"\n                : \"Browse in categories\";\n        const btnLink = favorites.length > 0 ? \"/favorites\" : \"/categories\";\n\n        return items.length === 0 ? (\n            <EmptyState\n                heading=\"Your cart is empty.\"\n                description=\"Add items to your cart to have them displayed here.\"\n                buttonText={btnText}\n                buttonLink={btnLink}\n            />\n        ) : (\n            <div className=\"shopping-cart\">\n                <h1 className=\"text-styles text-styles--h1\">Shopping Cart</h1>\n                <div className=\"shopping-cart__card-checkout-container\">\n                    <div className=\"shopping-cart__items-checkout-container\">\n                        <div className=\"shopping-cart__items-count-remove-container\">\n                            <h2 className=\"text-styles text-styles--h2\">\n                                {cartItemsCount}{\" \"}\n                                {cartItemsCount > 1 ? \"Items\" : \"Item\"}\n                            </h2>\n                            <button\n                                className=\"btn btn--icon-text\"\n                                onClick={() => onRemoveAllProducts()}\n                            >\n                                <span>Remove all items</span>\n                                <img alt=\"Remove item\" src=\"/icons/trash.svg\" />\n                            </button>\n                        </div>\n                        <div className=\"shopping-cart__item-card-container\">\n                            {items.map((item) => {\n                                return (\n                                    <CartItem\n                                        key={item.cartID}\n                                        item={item}\n                                        product={\n                                            products.filter(\n                                                (p) => p.id === item.productID\n                                            )[0]\n                                        }\n                                        image={\n                                            products.filter(\n                                                (p) => p.id === item.productID\n                                            )[0][\"image-small\"]\n                                        }\n                                        currency={currency}\n                                        onIncrementProduct={onIncrementProduct}\n                                        onDecrementProduct={onDecrementProduct}\n                                        onRemoveProduct={onRemoveProduct}\n                                    />\n                                );\n                            })}\n                        </div>\n                    </div>\n                    <div className=\"shopping-cart__checkout\">\n                        <div className=\"shopping-cart__h2\">\n                            <h2 className=\"text-styles text-styles--h2\">\n                                Checkout\n                            </h2>\n                        </div>\n                        <div className=\"shopping-cart__totals-btn-container\">\n                            <div className=\"shopping-cart__totals-container\">\n                                <div className=\"shopping-cart__total-value-container\">\n                                    <h3 className=\"shopping-cart__total text-styles text-styles--h3\">\n                                        Subtotal:\n                                    </h3>\n                                    <p>\n                                        {total.toFixed(2).replace(\"-0\", \"0\") +\n                                            currency}\n                                    </p>\n                                </div>\n                                <div className=\"shopping-cart__total-value-container\">\n                                    <h3 className=\"shopping-cart__total text-styles text-styles--h3\">\n                                        Delivery:\n                                    </h3>\n                                    <p>\n                                        {(0).toFixed(2).replace(\"-0\", \"0\") +\n                                            currency}\n                                    </p>\n                                </div>\n                                <div className=\"shopping-cart__total-value-container\">\n                                    <h3 className=\"shopping-cart__total text-styles text-styles--h3\">\n                                        Total:\n                                    </h3>\n                                    <p className=\"shopping-cart__total\">\n                                        {total.toFixed(2).replace(\"-0\", \"0\") +\n                                            currency}\n                                    </p>\n                                </div>\n                            </div>\n\n                            <button\n                                className=\"btn btn--primary shopping-cart__buy-btn\"\n                                onClick={() => {\n                                    this.handleTogglePopup();\n                                }}\n                            >\n                                Buy {cartItemsCount}{\" \"}\n                                {cartItemsCount > 1 ? \"Items\" : \"Item\"}\n                            </button>\n                        </div>\n\n                        {showPopup ? (\n                            <OnCheckoutPopup\n                                cart={cart}\n                                cartItemsCount={cartItemsCount}\n                                currency={currency}\n                                showPopup={showPopup}\n                                onTogglePopup={this.handleTogglePopup}\n                                onRemoveAllProducts={onRemoveAllProducts}\n                            />\n                        ) : null}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ShoppingCart;\n","// ProductPage Component\n// Represents the product page of the app\n\nimport React from \"react\";\n\nimport BuyProductInterface from \"./BuyProductInterface\";\nimport ProductCardScrollContainer from \"./ProductCardScrollContainer\";\nimport OnBuyPopup from \"./OnBuyPopup\";\n\nfunction ProductPage(props) {\n    const {\n        product,\n        favorites,\n        products,\n        currency,\n        buyProductInterface,\n        popupOnBuyProduct,\n        containerScrollPosition,\n        onFavorite,\n        onIncrementProduct,\n        onInterfaceIncrementQuantity,\n        onInterfaceDecrementQuantity,\n        onInterfaceReset,\n        onInterfaceSelectChange,\n        onTogglePopup,\n        onStoreScrollPosition,\n    } = props;\n    const { description, materials, cleaning, categories } = product;\n\n    return (\n        <div>\n            <h1 className=\"text-styles text-styles--h1\">{product.name}</h1>\n            <div className=\"product-page__buy-interface-container\">\n                <BuyProductInterface\n                    product={product}\n                    favorites={favorites}\n                    image={product[\"image-large\"]}\n                    currency={currency}\n                    buyProductInterface={buyProductInterface}\n                    popupOnBuyProduct={popupOnBuyProduct}\n                    onFavorite={onFavorite}\n                    onIncrementProduct={onIncrementProduct}\n                    onInterfaceIncrementQuantity={onInterfaceIncrementQuantity}\n                    onInterfaceDecrementQuantity={onInterfaceDecrementQuantity}\n                    onInterfaceReset={onInterfaceReset}\n                    onInterfaceSelectChange={onInterfaceSelectChange}\n                />\n            </div>\n            <div className=\"product-page__info\">\n                <h2 className=\"text-styles text-styles--h2 product-page__h2\">\n                    More information\n                </h2>\n                <div className=\"product-page__info-grid\">\n                    <div className=\"product-page__info-element\">\n                        <h3 className=\"text-styles text-styles--h3\">\n                            Description:\n                        </h3>\n                        <ul>\n                            {description.map((item) => {\n                                return (\n                                    <li key={description.indexOf(item)}>\n                                        - {item}\n                                    </li>\n                                );\n                            })}\n                        </ul>\n                    </div>\n                    <div className=\"product-page__info-element\">\n                        <h3 className=\"text-styles text-styles--h3\">\n                            Materials:\n                        </h3>\n                        <p>{materials}</p>\n                    </div>\n                    <div className=\"product-page__info-element\">\n                        <h3 className=\"text-styles text-styles--h3\">\n                            How to clean:\n                        </h3>\n                        <p>{cleaning}</p>\n                    </div>\n                </div>\n            </div>\n            <ProductCardScrollContainer\n                id={0}\n                category={categories[0]}\n                label=\"Similar Products\"\n                products={products.filter((p) => p !== product)}\n                favorites={favorites}\n                currency={currency}\n                scrollPosition={containerScrollPosition[0]}\n                onTogglePopup={onTogglePopup}\n                onFavorite={onFavorite}\n                onStoreScrollPosition={onStoreScrollPosition}\n            />\n            {popupOnBuyProduct.showPopup ? (\n                <OnBuyPopup\n                    product={popupOnBuyProduct.product}\n                    favorites={favorites}\n                    currency={currency}\n                    buyProductInterface={buyProductInterface}\n                    onFavorite={onFavorite}\n                    onIncrementProduct={onIncrementProduct}\n                    onTogglePopup={onTogglePopup}\n                    onInterfaceIncrementQuantity={onInterfaceIncrementQuantity}\n                    onInterfaceDecrementQuantity={onInterfaceDecrementQuantity}\n                    onInterfaceReset={onInterfaceReset}\n                    onInterfaceSelectChange={onInterfaceSelectChange}\n                />\n            ) : null}\n        </div>\n    );\n}\n\nexport default ProductPage;\n","// RangeSlider Component\n// Handles styling and initialization of third-party rc-slider component\n\nimport React, { Component } from \"react\";\nimport { Range } from \"rc-slider\";\nimport \"rc-slider/assets/index.css\";\n\nconst SliderLabel = {\n    fontSize: \"12px\",\n    lineHeight: \"0\",\n    margin: \"0 15px\",\n    width: \"45px\",\n};\n\nconst Track = {\n    backgroundColor: \"black\",\n    height: \"1px\",\n    top: \"7px\",\n    boxShadow: \"0 0 0 .4px black\",\n};\n\nconst Rail = {\n    height: \"1px\",\n    top: \"7px\",\n};\n\nconst Handle = {\n    backgroundColor: \"white\",\n    border: \"1px solid black\",\n    height: \"10px\",\n    width: \"10px\",\n    top: \"7px\",\n    boxShadow: \"0 0 0 .4px black\",\n};\n\nclass RangeSlider extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            values: props.values,\n        };\n    }\n\n    onValueChange(values) {\n        this.setState({ values: values });\n    }\n\n    render() {\n        const { values } = this.state;\n        const {\n            onSliderChange,\n            currency,\n            productsFilterSliderValues,\n        } = this.props;\n\n        return (\n            <>\n                <span style={SliderLabel}>\n                    {Math.floor(values[0]) + currency}\n                </span>\n                <Range\n                    max={180}\n                    step={5}\n                    defaultValue={productsFilterSliderValues}\n                    onChange={(event) => this.onValueChange(event)}\n                    onAfterChange={(event) => onSliderChange(event)}\n                    handleStyle={[Handle, Handle]}\n                    trackStyle={[Track]}\n                    railStyle={Rail}\n                />\n                <span style={SliderLabel}>\n                    {Math.floor(values[1]) + currency}\n                </span>\n            </>\n        );\n    }\n}\n\nexport default RangeSlider;\n","// ProductCardGrid Component\n// Includes the product grid and sorting + filtering\n\nimport React from \"react\";\n\nimport ProductCard from \"./ProductCard\";\nimport RangeSlider from \"./RangeSlider\";\nimport EmptyState from \"./EmptyState\";\n\nfunction ProductCardGrid(props) {\n    const {\n        products,\n        favorites,\n        currency,\n        productsSortBy,\n        productsFilterSliderValues,\n        onTogglePopup,\n        onFavorite,\n        onSort,\n        onSliderChange,\n    } = props;\n\n    return (\n        <div>\n            <div className=\"product-card-grid__btn-container\">\n                <div>\n                    <p className=\"product-card-grid__container-label text-styles text-styles--label\">\n                        Sort by:\n                    </p>\n\n                    <div className=\"btn btn--select product-card-grid__btn\">\n                        <select\n                            onChange={(event) => onSort(event.target.value)}\n                            name=\"sort\"\n                            id=\"sort-select\"\n                            defaultValue={productsSortBy}\n                        >\n                            <option key=\"sort-pricing-default\" value=\"default\">\n                                Our Favorites\n                            </option>\n                            <option\n                                key=\"sort-pricing-ascending\"\n                                value=\"ascending\"\n                            >\n                                Lowest Prices first\n                            </option>\n                            <option\n                                key=\"sort-pricing-descending\"\n                                value=\"descending\"\n                            >\n                                Highest Prices first\n                            </option>\n                            ))\n                        </select>\n                        <img src=\"/icons/down-arrow.svg\" alt=\"\" />\n                    </div>\n                </div>\n\n                <div>\n                    <p className=\"product-card-grid__container-label text-styles text-styles--label\">\n                        Filter by price span:\n                    </p>\n                    <div className=\"btn btn--slider product-card-grid__btn\">\n                        <div className=\"slider-content\">\n                            <RangeSlider\n                                onSliderChange={onSliderChange}\n                                values={productsFilterSliderValues}\n                                productsFilterSliderValues={\n                                    productsFilterSliderValues\n                                }\n                                currency={currency}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            {products.length === 0 ? (\n                <EmptyState\n                    heading=\"No products found.\"\n                    description=\"Adjust the price span to discover new products.\"\n                    buttonText={null}\n                    buttonLink={null}\n                />\n            ) : (\n                <div className=\"product-card-grid__product-grid\">\n                    {products.map((item) => {\n                        return (\n                            <ProductCard\n                                key={item.id}\n                                product={item}\n                                favorites={favorites}\n                                currency={currency}\n                                onTogglePopup={onTogglePopup}\n                                onFavorite={onFavorite}\n                            />\n                        );\n                    })}\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default ProductCardGrid;\n","// ProductsOverview Component\n// Product grid page of the app\n// Connects product grid and onBuyPopup\n\nimport React from \"react\";\n\nimport ProductCardGrid from \"./ProductCardGrid\";\nimport OnBuyPopup from \"./OnBuyPopup\";\n\nfunction ProductsOverview(props) {\n    const {\n        products,\n        favorites,\n        category,\n        currency,\n        displayedProducts,\n        productsSortBy,\n        productsFilterSliderValues,\n        popupOnBuyProduct,\n        buyProductInterface,\n        onIncrementProduct,\n        onFavorite,\n        onSort,\n        onSliderChange,\n        onTogglePopup,\n        onInterfaceIncrementQuantity,\n        onInterfaceDecrementQuantity,\n        onInterfaceReset,\n        onInterfaceSelectChange,\n    } = props;\n\n    return (\n        <div>\n            <h1 className=\"text-styles text-styles--h1\">{category}</h1>\n            <ProductCardGrid\n                products={products.filter((product) =>\n                    displayedProducts.includes(product.id)\n                )}\n                favorites={favorites}\n                currency={currency}\n                productsSortBy={productsSortBy}\n                productsFilterSliderValues={productsFilterSliderValues}\n                onTogglePopup={onTogglePopup}\n                onFavorite={onFavorite}\n                onSort={onSort}\n                onSliderChange={onSliderChange}\n            />\n            {popupOnBuyProduct.showPopup ? (\n                <OnBuyPopup\n                    product={popupOnBuyProduct.product}\n                    favorites={favorites}\n                    currency={currency}\n                    buyProductInterface={buyProductInterface}\n                    popupOnBuyProduct={popupOnBuyProduct}\n                    onFavorite={onFavorite}\n                    onIncrementProduct={onIncrementProduct}\n                    onTogglePopup={onTogglePopup}\n                    onInterfaceIncrementQuantity={onInterfaceIncrementQuantity}\n                    onInterfaceDecrementQuantity={onInterfaceDecrementQuantity}\n                    onInterfaceReset={onInterfaceReset}\n                    onInterfaceSelectChange={onInterfaceSelectChange}\n                />\n            ) : null}\n        </div>\n    );\n}\n\nexport default ProductsOverview;\n","// Content Component\n// Handles distribution of props and routes\n\nimport React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\n\nimport Home from \"./Home\";\nimport Categories from \"./Categories\";\nimport ShoppingCart from \"./ShoppingCart\";\nimport ProductPage from \"./ProductPage\";\nimport ProductsOverview from \"./ProductsOverview\";\nimport EmptyState from \"./EmptyState\";\n\nfunction Content(props) {\n    const {\n        products,\n        cart,\n        favorites,\n        categories,\n        currency,\n        displayedProducts,\n        productsSortBy,\n        productsFilterSliderValues,\n        popupOnBuyProduct,\n        buyProductInterface,\n        containerScrollPosition,\n        onIncrementProduct,\n        onDecrementProduct,\n        onFavorite,\n        onRemoveProduct,\n        onRemoveAllProducts,\n        onSort,\n        onSliderChange,\n        onTogglePopup,\n        onInterfaceIncrementQuantity,\n        onInterfaceDecrementQuantity,\n        onInterfaceReset,\n        onInterfaceSelectChange,\n        onStoreScrollPosition,\n    } = props;\n\n    return (\n        <div className=\"content\">\n            <Switch>\n                <Route\n                    exact\n                    path=\"/\"\n                    component={() => (\n                        <Home\n                            products={products}\n                            categories={categories}\n                            favorites={favorites}\n                            currency={currency}\n                            popupOnBuyProduct={popupOnBuyProduct}\n                            buyProductInterface={buyProductInterface}\n                            containerScrollPosition={containerScrollPosition}\n                            onTogglePopup={onTogglePopup}\n                            onFavorite={onFavorite}\n                            onIncrementProduct={onIncrementProduct}\n                            onInterfaceIncrementQuantity={\n                                onInterfaceIncrementQuantity\n                            }\n                            onInterfaceDecrementQuantity={\n                                onInterfaceDecrementQuantity\n                            }\n                            onInterfaceReset={onInterfaceReset}\n                            onInterfaceSelectChange={onInterfaceSelectChange}\n                            onStoreScrollPosition={onStoreScrollPosition}\n                        />\n                    )}\n                />\n                <Route\n                    exact\n                    path=\"/cart\"\n                    component={() => (\n                        <ShoppingCart\n                            products={products}\n                            cart={cart}\n                            cartItemsCount={cart.items\n                                .map((item) => item.quantity)\n                                .reduce((prev, next) => prev + next, 0)}\n                            favorites={favorites}\n                            currency={currency}\n                            onIncrementProduct={onIncrementProduct}\n                            onDecrementProduct={onDecrementProduct}\n                            onRemoveProduct={onRemoveProduct}\n                            onRemoveAllProducts={onRemoveAllProducts}\n                        />\n                    )}\n                />\n                <Route\n                    exact\n                    path=\"/favorites\"\n                    component={() =>\n                        favorites.length === 0 ? (\n                            <EmptyState\n                                heading=\"You have no favorite items yet.\"\n                                description=\"Mark items as favorites to have them displayed here.\"\n                                buttonText=\"Browse in categories\"\n                                buttonLink=\"/categories\"\n                            />\n                        ) : (\n                            <ProductsOverview\n                                category=\"Favorites\"\n                                products={products.filter((product) =>\n                                    favorites\n                                        .map((item) => item.productID)\n                                        .includes(product.id)\n                                )}\n                                favorites={favorites}\n                                currency={currency}\n                                displayedProducts={displayedProducts}\n                                productsSortBy={productsSortBy}\n                                productsFilterSliderValues={\n                                    productsFilterSliderValues\n                                }\n                                popupOnBuyProduct={popupOnBuyProduct}\n                                buyProductInterface={buyProductInterface}\n                                onIncrementProduct={onIncrementProduct}\n                                onFavorite={onFavorite}\n                                onSort={onSort}\n                                onSliderChange={onSliderChange}\n                                onTogglePopup={onTogglePopup}\n                                onInterfaceIncrementQuantity={\n                                    onInterfaceIncrementQuantity\n                                }\n                                onInterfaceDecrementQuantity={\n                                    onInterfaceDecrementQuantity\n                                }\n                                onInterfaceReset={onInterfaceReset}\n                                onInterfaceSelectChange={\n                                    onInterfaceSelectChange\n                                }\n                            />\n                        )\n                    }\n                />\n                <Route\n                    exact\n                    path=\"/categories\"\n                    component={() => (\n                        <Categories\n                            products={products}\n                            categories={categories}\n                        />\n                    )}\n                />\n                <Route\n                    path=\"/categories/:category\"\n                    render={(routerProps) => (\n                        <ProductsOverview\n                            category={\n                                categories\n                                    .map((category) => category.name)\n                                    .filter(\n                                        (c) =>\n                                            c\n                                                .toLowerCase()\n                                                .split(/[_\\s]/)\n                                                .join(\"-\") ===\n                                            routerProps.match.params.category\n                                    )[0]\n                            }\n                            products={products.filter((product) =>\n                                product.categories.includes(\n                                    categories\n                                        .map((category) => category.name)\n                                        .filter(\n                                            (c) =>\n                                                c\n                                                    .toLowerCase()\n                                                    .split(/[_\\s]/)\n                                                    .join(\"-\") ===\n                                                routerProps.match.params\n                                                    .category\n                                        )[0]\n                                )\n                            )}\n                            favorites={favorites}\n                            currency={currency}\n                            displayedProducts={displayedProducts}\n                            productsSortBy={productsSortBy}\n                            productsFilterSliderValues={\n                                productsFilterSliderValues\n                            }\n                            popupOnBuyProduct={popupOnBuyProduct}\n                            buyProductInterface={buyProductInterface}\n                            onIncrementProduct={onIncrementProduct}\n                            onFavorite={onFavorite}\n                            onSort={onSort}\n                            onSliderChange={onSliderChange}\n                            onTogglePopup={onTogglePopup}\n                            onInterfaceIncrementQuantity={\n                                onInterfaceIncrementQuantity\n                            }\n                            onInterfaceDecrementQuantity={\n                                onInterfaceDecrementQuantity\n                            }\n                            onInterfaceReset={onInterfaceReset}\n                            onInterfaceSelectChange={onInterfaceSelectChange}\n                        />\n                    )}\n                />\n                <Route\n                    exact\n                    path=\"/products\"\n                    component={() => (\n                        <ProductsOverview\n                            category=\"All Products\"\n                            products={products}\n                            favorites={favorites}\n                            currency={currency}\n                            displayedProducts={displayedProducts}\n                            productsSortBy={productsSortBy}\n                            productsFilterSliderValues={\n                                productsFilterSliderValues\n                            }\n                            popupOnBuyProduct={popupOnBuyProduct}\n                            buyProductInterface={buyProductInterface}\n                            onIncrementProduct={onIncrementProduct}\n                            onFavorite={onFavorite}\n                            onSort={onSort}\n                            onSliderChange={onSliderChange}\n                            onTogglePopup={onTogglePopup}\n                            onInterfaceIncrementQuantity={\n                                onInterfaceIncrementQuantity\n                            }\n                            onInterfaceDecrementQuantity={\n                                onInterfaceDecrementQuantity\n                            }\n                            onInterfaceReset={onInterfaceReset}\n                            onInterfaceSelectChange={onInterfaceSelectChange}\n                        />\n                    )}\n                />\n                <Route\n                    path=\"/products/id=:productID\"\n                    render={(routerProps) => (\n                        <ProductPage\n                            product={\n                                products.filter(\n                                    (p) =>\n                                        p.id.toString() ===\n                                        routerProps.match.params.productID.toString()\n                                )[0]\n                            }\n                            currency={currency}\n                            favorites={favorites}\n                            products={products}\n                            buyProductInterface={buyProductInterface}\n                            popupOnBuyProduct={popupOnBuyProduct}\n                            containerScrollPosition={containerScrollPosition}\n                            onFavorite={onFavorite}\n                            onIncrementProduct={onIncrementProduct}\n                            onInterfaceIncrementQuantity={\n                                onInterfaceIncrementQuantity\n                            }\n                            onInterfaceDecrementQuantity={\n                                onInterfaceDecrementQuantity\n                            }\n                            onInterfaceReset={onInterfaceReset}\n                            onInterfaceSelectChange={onInterfaceSelectChange}\n                            onTogglePopup={onTogglePopup}\n                            onStoreScrollPosition={onStoreScrollPosition}\n                        />\n                    )}\n                />\n            </Switch>\n        </div>\n    );\n}\n\nexport default Content;\n","// Footer Component\n\nimport React from \"react\";\n\nfunction Footer() {\n    return (\n        <div className=\"footer\">\n            <p className=\"footer__copyright\">\n                {\"\\u00A9\"} 2020 Christopher Lang\n            </p>\n            <p className=\"footer__icons-referral\">\n                All icons are provided by{\" \"}\n                <a\n                    href=\"https://iconscout.com/contributors/unicons\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    Unicons Font\n                </a>\n                .\n            </p>\n        </div>\n    );\n}\n\nexport default Footer;\n","// ScrollToTop Component\n// Handles scrolling to the top when a new route is entered\n\nimport { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nfunction ScrollToTop() {\n    const { pathname } = useLocation();\n\n    useEffect(() => {\n        window.scrollTo(0, 0);\n    }, [pathname]);\n\n    return null;\n}\n\nexport default ScrollToTop;\n","// App Component\n// Root Component\n// Contains all handle methods of the app\n\nimport React, { Component } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport \"./App.scss\";\n\nimport Navbar from \"./components/Navbar\";\nimport Content from \"./components/Content\";\nimport Footer from \"./components/Footer\";\nimport ScrollToTop from \"./components/ScrollToTop\";\nimport products from \"./data/products.json\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            products: products,\n            cart: {\n                items: [],\n                total: 0,\n            },\n            favorites: [],\n            categories: [],\n            currency: \"€\",\n            displayedProducts: products.map((product) => product.id),\n            productsSortBy: \"default\",\n            productsFilterSliderValues: [0, 180],\n            popupOnBuyProduct: { showPopup: false, product: null },\n            buyProductInterface: { quantity: 1, selectedValue: null },\n            containerScrollPosition: [0, 0, 0, 0, 0, 0],\n        };\n    }\n\n    componentDidMount() {\n        // Copying products from current state\n        const products = [...this.state.products];\n        // Each product that is on sale, add the category \"Sale\"\n        products.forEach((product) => {\n            if (product.sale !== null) {\n                product.categories.push(\"Sale\");\n            }\n        });\n\n        // Setting the new state\n        this.setState({ products: products });\n\n        // Merging the category arrays from products and removing duplicats\n        const categorieSet = [\n            ...new Set(\n                [].concat.apply(\n                    [],\n                    this.state.products.map((item) => item.categories)\n                )\n            ),\n        ];\n\n        // Creating an array of objects consisting of the categories from categorieSet and their respective productCount\n        const categories = categorieSet.map((item) => {\n            return {\n                name: item,\n                productCount: products.filter((product) =>\n                    product.categories.includes(item)\n                ).length,\n            };\n        });\n\n        // Sorting categories by their productCount\n        const categoriesSorted = categories.sort((prev, next) =>\n            prev.productCount < next.productCount ? 1 : -1\n        );\n\n        // Setting the state for categories\n        this.setState({ categories: categoriesSorted });\n\n        // If cart is set in storage, update cart in state with data out of localStorage\n        if (localStorage.getItem(\"cart\") !== null) {\n            this.setState({ cart: JSON.parse(localStorage.getItem(\"cart\")) });\n        }\n\n        // If favorites is set in storage, update favorites in state with data out of localStorage\n        if (localStorage.getItem(\"favorites\") !== null) {\n            this.setState({\n                favorites: JSON.parse(localStorage.getItem(\"favorites\")),\n            });\n        }\n    }\n\n    handleIncrementProduct = (\n        product,\n        selectedValue = product.sizes[0],\n        quantity = 1\n    ) => {\n        // Copying cart from current state\n        const cart = { ...this.state.cart };\n\n        /* START - Adjusting array of cart.items */\n        // Copying cart.items from current state\n        const cartItems = [...this.state.cart.items];\n\n        // If an item with the selected value isn't already in cart, create one and push it to the array; otherwise copy from current state\n        if (cartItems.filter((p) => p.productID === product.id).length === 0) {\n            cartItems.push({\n                cartID: cartItems.length,\n                productID: product.id,\n                quantity: 0,\n                selectedValue: selectedValue,\n            });\n        } else if (\n            cartItems.filter((p) => p.productID === product.id).length > 0 &&\n            cartItems\n                .filter(\n                    (p) =>\n                        p.productID === product.id &&\n                        p.selectedValue === selectedValue\n                )\n                .map((p) => p.selectedValue)[0] !== selectedValue\n        ) {\n            cartItems.push({\n                cartID: cartItems.length,\n                productID: product.id,\n                quantity: 0,\n                selectedValue: selectedValue,\n            });\n        } else {\n            const index = cartItems.indexOf(\n                cartItems.filter(\n                    (item) =>\n                        item.productID === product.id &&\n                        item.selectedValue === selectedValue\n                )[0]\n            );\n            cartItems[index] = {\n                ...this.state.cart.items[index],\n            };\n        }\n\n        // Determine index of cartItem\n        const index = cartItems.indexOf(\n            cartItems.filter(\n                (item) =>\n                    item.productID === product.id &&\n                    item.selectedValue === selectedValue\n            )[0]\n        );\n\n        // Increment quantity of cartItem\n        cartItems[index].quantity += quantity;\n\n        // Replace old items array with new one\n        cart.items = cartItems;\n        /* END - Adjusting array of cart.items */\n\n        /* START - Adjusting value of cart.total */\n        // Copying cart.total from current state\n        let cartTotal = this.state.cart.total;\n\n        // Increase cartTotal by price of bought product\n        cartTotal += (product.sale ? product.sale : product.price) * quantity;\n\n        // Replace old total value with new one\n        cart.total = cartTotal;\n        /* END - Adjusting value of cart.total */\n\n        // Setting the new state and saving cart in localStorage\n        this.setState({ cart: cart }, () => {\n            localStorage.setItem(\"cart\", JSON.stringify(this.state.cart));\n        });\n    };\n\n    handleDecrementProduct = (product, selectedValue) => {\n        // Copying cart from current state\n        const cart = { ...this.state.cart };\n\n        /* START - Adjusting array of cart.items */\n        // Copying cart.items from current state\n        const cartItems = [...this.state.cart.items];\n\n        // Determine index of cartItem\n        const index = cartItems.indexOf(\n            cartItems.filter(\n                (item) =>\n                    item.productID === product.id &&\n                    item.selectedValue === selectedValue\n            )[0]\n        );\n\n        // If an item has only one quantity in cart remaining, remove it from the array; otherwise decrement cartItem\n        if (cartItems[index].quantity === 1) {\n            cartItems.splice(index, 1);\n        } else {\n            // Decrement quantity of cartItem\n            cartItems[index].quantity--;\n        }\n\n        // Replace old items array with new one\n        cart.items = cartItems;\n        /* END - Adjusting array of cart.items */\n\n        /* START - Adjusting value of cart.total */\n        // Copying cart.total from current state\n        let cartTotal = this.state.cart.total;\n\n        // Decrease cartTotal by price of bought product\n        cartTotal -= product.sale ? product.sale : product.price;\n\n        // Replace old total value with new one\n        cart.total = cartTotal;\n        /* END - Adjusting value of cart.total */\n\n        // Setting the new state and saving cart in localStorage\n        this.setState({ cart: cart }, () => {\n            localStorage.setItem(\"cart\", JSON.stringify(this.state.cart));\n        });\n    };\n\n    handleRemoveProduct = (product, selectedValue) => {\n        // Copying cart from current state\n        const cart = { ...this.state.cart };\n\n        /* START - Adjusting array of cart.items */\n        // Copying cart.items from current state\n        const cartItems = [...this.state.cart.items];\n\n        // Determine index of cartItem\n        const index = cartItems.indexOf(\n            cartItems.filter(\n                (item) =>\n                    item.productID === product.id &&\n                    item.selectedValue === selectedValue\n            )[0]\n        );\n\n        // Determine quantity of cartItem in cart\n        const quantity = cartItems[index].quantity;\n\n        // Remove cartItem\n        cartItems.splice(index, 1);\n\n        // Replace old items array with new one\n        cart.items = cartItems;\n        /* END - Adjusting array of cart.items */\n\n        /* START - Adjusting value of cart.total */\n        // Copying cart.total from current state\n        let cartTotal = this.state.cart.total;\n\n        // Decrease cartTotal by price of bought product\n        cartTotal -= (product.sale ? product.sale : product.price) * quantity;\n\n        // Replace old total value with new one\n        cart.total = cartTotal;\n        /* END - Adjusting value of cart.total */\n\n        // Setting the new state and saving cart in localStorage\n        this.setState({ cart: cart }, () => {\n            localStorage.setItem(\"cart\", JSON.stringify(this.state.cart));\n        });\n    };\n\n    handleRemoveAllProducts = () => {\n        // Copying cart from current state\n        const cart = { ...this.state.cart };\n\n        /* START - Adjusting array of cart.items */\n\n        // Remove cartItem\n        const cartItems = [];\n\n        // Replace old items array with new one\n        cart.items = cartItems;\n        /* END - Adjusting array of cart.items */\n\n        /* START - Adjusting value of cart.total */\n        // Decrease cartTotal by price of bought product\n        const cartTotal = 0;\n\n        // Replace old total value with new one\n        cart.total = cartTotal;\n        /* END - Adjusting value of cart.total */\n\n        // Setting the new state and saving cart in localStorage\n        this.setState({ cart: cart }, () => {\n            localStorage.setItem(\"cart\", JSON.stringify(this.state.cart));\n        });\n    };\n\n    handleFavorite = (product) => {\n        // Copying favorites from current state\n        const favorites = [...this.state.favorites];\n\n        // If an item isn't already a favorite, create one and push it to the array; otherwise remove it from the array\n        if (favorites.filter((p) => p.productID === product.id).length !== 1) {\n            favorites.push({\n                productID: product.id,\n            });\n        } else {\n            const index = favorites.indexOf(\n                favorites.filter((item) => item.productID === product.id)[0]\n            );\n            favorites.splice(index, 1);\n        }\n\n        // Setting the new state and saving favorites in localStorage\n        this.setState({ favorites: favorites }, () => {\n            localStorage.setItem(\n                \"favorites\",\n                JSON.stringify(this.state.favorites)\n            );\n        });\n    };\n\n    handleSort = (sortBy) => {\n        // Copying products and productsSortBy from current state\n        const products = [...this.state.products];\n        const productsSortBy = sortBy;\n\n        // Sorting by default order\n        if (productsSortBy === \"default\") {\n            products.sort((prev, next) => {\n                if (prev.id > next.id) return 1;\n                else if (prev.id < next.id) return -1;\n                else return 0;\n            });\n        } else {\n            // Declaring the sortValue\n            let sortValue;\n\n            // Defining the sortValue\n            if (productsSortBy === \"ascending\") sortValue = 1;\n            else if (productsSortBy === \"descending\") sortValue = -1;\n\n            // Sorting the products array in regards to sortValue\n            products.sort((prev, next) => {\n                if (\n                    (prev.sale ? prev.sale : prev.price) >\n                    (next.sale ? next.sale : next.price)\n                )\n                    return sortValue;\n                else if (\n                    (prev.sale ? prev.sale : prev.price) <\n                    (next.sale ? next.sale : next.price)\n                )\n                    return -sortValue;\n                else return 0;\n            });\n        }\n\n        // Setting the new state\n        this.setState({\n            products: products,\n            productsSortBy: productsSortBy,\n        });\n    };\n\n    handleSliderChange = (sliderValues) => {\n        // Copying products and productsFilterSliderValues from current state\n        let products = [...this.state.products];\n        const productsFilterSliderValues = sliderValues;\n\n        // Filtering the products regarding to price span\n        const displayedProducts = products\n            .filter(\n                (product) =>\n                    (product.sale ? product.sale : product.price) >=\n                        productsFilterSliderValues[0] &&\n                    (product.sale ? product.sale : product.price) <=\n                        productsFilterSliderValues[1]\n            )\n            .map((product) => product.id);\n\n        // Setting the new state\n        this.setState({\n            displayedProducts: displayedProducts,\n            productsFilterSliderValues: productsFilterSliderValues,\n        });\n    };\n\n    handleTogglePopup = (product = null) => {\n        // Setting the new state with boolean whether popup is open or not\n        this.setState({\n            popupOnBuyProduct: {\n                showPopup: !this.state.popupOnBuyProduct.showPopup,\n                product: product,\n            },\n        });\n    };\n\n    handleInterfaceIncrementQuantity = () => {\n        // Copying buyProductInterface from current state\n        const buyProductInterface = { ...this.state.buyProductInterface };\n\n        // Increment quantity\n        buyProductInterface.quantity++;\n\n        // Setting the new state\n        this.setState({ buyProductInterface: buyProductInterface });\n    };\n\n    handleInterfaceDecrementQuantity = () => {\n        // Copying buyProductInterface from current state\n        const buyProductInterface = { ...this.state.buyProductInterface };\n\n        // If quantity > 1, decrement quantity\n        if (buyProductInterface.quantity > 1) buyProductInterface.quantity--;\n\n        // Setting the new state\n        this.setState({ buyProductInterface: buyProductInterface });\n    };\n\n    handleInterfaceReset = () => {\n        // Copying buyProductInterface from current state\n        const buyProductInterface = { ...this.state.buyProductInterface };\n\n        // Resetting values of buyProductInterface\n        buyProductInterface.quantity = 1;\n        buyProductInterface.selectedValue = null;\n\n        // Setting the new state\n        this.setState({ buyProductInterface: buyProductInterface });\n    };\n\n    handleInterfaceSelectChange = (value) => {\n        // Copying buyProductInterface from current state\n        const buyProductInterface = { ...this.state.buyProductInterface };\n\n        // Setting selectValue to the changed value\n        buyProductInterface.selectedValue = value;\n\n        // Setting the state with the new selected value\n        this.setState({ buyProductInterface: buyProductInterface });\n    };\n\n    handleStoreScrollPosition = (scrollContainerID, scrollPos) => {\n        // Copying containerScrollPosition from current state\n        const containerScrollPosition = [...this.state.containerScrollPosition];\n\n        // Setting containerScrollPosition to the changed value\n        containerScrollPosition[scrollContainerID] = scrollPos;\n\n        // Setting the new state\n        this.setState({ containerScrollPosition: containerScrollPosition });\n    };\n\n    render() {\n        const {\n            products,\n            cart,\n            favorites,\n            categories,\n            currency,\n            displayedProducts,\n            productsSortBy,\n            productsFilterSliderValues,\n            popupOnBuyProduct,\n            buyProductInterface,\n            containerScrollPosition,\n        } = this.state;\n\n        return (\n            <div className=\"App\">\n                <BrowserRouter>\n                    <ScrollToTop />\n                    <Navbar\n                        cartItemsCount={cart.items\n                            .map((item) => item.quantity)\n                            .reduce((prev, next) => prev + next, 0)}\n                    />\n                    <Content\n                        products={products}\n                        cart={cart}\n                        favorites={favorites}\n                        categories={categories}\n                        currency={currency}\n                        displayedProducts={displayedProducts}\n                        productsSortBy={productsSortBy}\n                        productsFilterSliderValues={productsFilterSliderValues}\n                        popupOnBuyProduct={popupOnBuyProduct}\n                        buyProductInterface={buyProductInterface}\n                        containerScrollPosition={containerScrollPosition}\n                        onIncrementProduct={this.handleIncrementProduct}\n                        onDecrementProduct={this.handleDecrementProduct}\n                        onRemoveProduct={this.handleRemoveProduct}\n                        onRemoveAllProducts={this.handleRemoveAllProducts}\n                        onFavorite={this.handleFavorite}\n                        onSort={this.handleSort}\n                        onSliderChange={this.handleSliderChange}\n                        onTogglePopup={this.handleTogglePopup}\n                        onInterfaceIncrementQuantity={\n                            this.handleInterfaceIncrementQuantity\n                        }\n                        onInterfaceDecrementQuantity={\n                            this.handleInterfaceDecrementQuantity\n                        }\n                        onInterfaceReset={this.handleInterfaceReset}\n                        onInterfaceSelectChange={\n                            this.handleInterfaceSelectChange\n                        }\n                        onStoreScrollPosition={this.handleStoreScrollPosition}\n                    />\n                    <Footer />\n                </BrowserRouter>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}